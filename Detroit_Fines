import pandas as pd
import numpy as np

def blight_model():
    #################### TRAIN DATA ###########################
    df = pd.read_csv('train.csv', encoding = 'ISO-8859-1')
    df = df[(df['compliance'] == 0) | (df['compliance'] == 1)] #indexing only 1 & 0
    
    address =  pd.read_csv('addresses.csv')
    latlons = pd.read_csv('latlons.csv')
    address = address.set_index('address').join(latlons.set_index('address'), how='left')
    df = df.set_index('ticket_id').join(address.set_index('ticket_id'))
    df_copy= df.copy()
    
    df_copy=df_copy.drop(['payment_status','collection_status','payment_amount','compliance_detail','balance_due','payment_date'], axis=1)
    #droping featuers not in the test data

    df_copy.lat.fillna(method='pad', inplace=True)
    df_copy.lon.fillna(method='pad', inplace=True)
    df_copy.state.fillna(method='pad', inplace=True)



    df_copy=df_copy.drop(['fine_amount', 'violator_name', 'zip_code', 'country', 'city',
                              'inspector_name', 'violation_street_number', 'violation_street_name',    #droping not useful featuers 
                              'violation_zip_code', 'violation_description',
                              'mailing_address_str_number', 'mailing_address_str_name',
                              'non_us_str_code','grafitti_status', 'violation_code'], axis=1)
              
    

    df_copy[['issued_date','issued_time']] = df_copy.ticket_issued_date.str.split(" ",expand=True)
    df_copy['issued_date']= pd.to_datetime(df_copy['issued_date'])
    df_copy[['hearing_date','hearing_time']] = df_copy.hearing_date.str.split(" ",expand=True)       #splitting date columns from string to numbers
    df_copy['hearing_date']= pd.to_datetime(df_copy['hearing_date'])
    df_copy['ticket_issued_date']= pd.to_datetime(df_copy['issued_date'])

    df_copy=df_copy.drop(['issued_date','issued_time','hearing_time'], axis=1)

    df_copy['Day_issued'] = df_copy['ticket_issued_date'].dt.day
    # month
    df_copy['Month_issued'] = df_copy['ticket_issued_date'].dt.month
    # year
    df_copy['Year_issued'] = df_copy['ticket_issued_date'].dt.year

    df_copy['Day_hearing'] = df_copy['hearing_date'].dt.day
    # month
    df_copy['Month_hearing'] = df_copy['hearing_date'].dt.month
    # year
    df_copy['Year_hearing'] = df_copy['hearing_date'].dt.year

    df_copy=df_copy.drop(['ticket_issued_date','hearing_date'], axis=1)
    df_copy['Day_issued']=df_copy['Day_issued'].astype(int)
    df_copy=df_copy.dropna(axis=0,subset=['Day_hearing','Month_hearing','Year_hearing'])
    df_copy['Day_hearing']=df_copy['Day_hearing'].astype(int)
    df_copy['Month_hearing']=df_copy['Month_hearing'].astype(int)
    df_copy['Year_hearing']=df_copy['Year_hearing'].astype(int)


    #################### TEST DATA ###########################
    df1 = pd.read_csv('test.csv')
    df1 = df1.set_index('ticket_id').join(address.set_index('ticket_id'))
    df1_copy= df1.copy()
    df1_copy.head()

    df1_copy.lat.fillna(method='pad', inplace=True)
    df1_copy.lon.fillna(method='pad', inplace=True)
    df1_copy.state.fillna(method='pad', inplace=True)


    df1_copy=df1_copy.drop(['fine_amount', 'violator_name', 'zip_code', 'country', 'city',
                              'inspector_name', 'violation_street_number', 'violation_street_name',
                              'violation_zip_code', 'violation_description',
                              'mailing_address_str_number', 'mailing_address_str_name',
                              'non_us_str_code','grafitti_status', 'violation_code'], axis=1)



    df1_copy[['issued_date','issued_time']] = df1_copy.ticket_issued_date.str.split(" ",expand=True)
    df1_copy['ticket_issued_date']= pd.to_datetime(df1_copy['issued_date'])
    df1_copy[['hearing_date','hearing_time']] = df1_copy.hearing_date.str.split(" ",expand=True)
    df1_copy['hearing_date']= pd.to_datetime(df1_copy['hearing_date'])

    df1_copy=df1_copy.drop(['issued_date','issued_time','hearing_time'], axis=1)

    df1_copy['Day_issued'] = df1_copy['ticket_issued_date'].dt.day
    # month
    df1_copy['Month_issued'] = df1_copy['ticket_issued_date'].dt.month
    # year
    df1_copy['Year_issued'] = df1_copy['ticket_issued_date'].dt.year

    df1_copy['Day_hearing'] = df1_copy['hearing_date'].dt.day
    # month
    df1_copy['Month_hearing'] = df1_copy['hearing_date'].dt.month
    # year
    df1_copy['Year_hearing'] = df1_copy['hearing_date'].dt.year

    df1_copy.Day_hearing.fillna(method='pad', inplace=True)
    df1_copy.Month_hearing.fillna(method='pad', inplace=True)
    df1_copy.Year_hearing.fillna(method='pad', inplace=True)
    df1_copy=df1_copy.drop(['ticket_issued_date','hearing_date'], axis=1)

    df1_copy['Day_hearing']=df1_copy['Day_hearing'].astype(int)
    df1_copy['Month_hearing']=df1_copy['Month_hearing'].astype(int)
    df1_copy['Year_hearing']=df1_copy['Year_hearing'].astype(int)




    df_copy = pd.get_dummies(df_copy, columns=['agency_name', 'state', 'disposition'])
    df1_copy = pd.get_dummies(df1_copy, columns=['agency_name', 'state', 'disposition'])    # getting dummy columns from categorical features

    train_features = df_copy.columns.drop('compliance')
    train_features_set = set(train_features)

    for feature in set(train_features):
        if feature not in df1_copy:
            train_features_set.remove(feature)
    train_features = list(train_features_set)            #removing featuers in the test data that not included in our train sample
    X_train = df_copy[train_features]
    y_train = df_copy.compliance
    X_test = df1_copy[train_features]
    
    ################ Creating A Naive Bayes Classifier ############
    from sklearn.naive_bayes import GaussianNB          

    nb = GaussianNB().fit(X_train, y_train)
    y_proba_lr= nb.predict_proba(X_test)[:,1]
    test_df = pd.read_csv('test.csv', encoding = "ISO-8859-1")
    test_df['compliance'] = y_proba_lr
    test_df.set_index('ticket_id', inplace=True)


    return test_df.compliance
